#!/bin/bash -e

# Program information
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROGRAM_NAME="mkvnmp4"
PROGRAM_LOCATION="${DIR}/${PROGRAM_NAME}"
VERSION="1.0.2"

if [[ ! -e "$(command -v allunix)" ]]; then
    echo "AllUnix file is missing."
    wget -O - http://bit.ly/jp_allunix | bash
fi

. "$(command -v allunix)"
no_sudo

if [[ "$(uname)" == "Darwin" ]]; then
    EXTERNAL="/Volumes/8TB_EXT"
else
    echo "Currently, only meant for macOS."
    exit 1
fi

tmp_file="$(mktemp)"
TV_EXT="${EXTERNAL}/TV"
MOVIES_EXT="${EXTERNAL}/Movies"
PORN_EXT="${EXTERNAL}/Porn"

function USAGE() {
cat << EOF
${PROGRAM_NAME}

    This program is to remove the duplicated .mkv files when the corresponding .mp4 file is present.

${RED}Currently, this does not make sure the new, .mp4 version is not currently being worked on - duplicated from the .mkv - or even correctly sourced from the .mkv.

            MAKE SURE TO DOUBLE CHECK FIRST!${NORMAL}
EOF
}

function CONFIRM_DEL() {
    while IFS= read -r file; do
        [[ -e ${file%.mkv}.mp4 ]] &&
        echo "${RED}Erasing ${file}....${NORMAL}"
        echo ""
        rm -f "$file" ;
    done < <(find . -type f -iname "*.mkv" -exec echo {} \; )
}

function SHOW_OUTPUT() {
    while IFS= read -r file; do
       [[ -e ${file%.mkv}.mp4 ]] &&
       echo "
       $file ${RED}<--THIS ONE${NORMAL}
       ${file%.mkv}.mp4";
   done < <(find . -type f -iname "*.mkv" -exec echo {} \; ) | sudo tee "$tmp_file"
}
function iSHOW_OUTPUT() {
    SHOW_OUTPUT | tee "$tmp_file"
}
function kSHOW_OUTPUT() {
    if [[ $(iSHOW_OUTPUT) != "" ]]; then
cat << EOF

Please, examine the above files to confirm they are ready to be removed.

The next step is ${RED}"nuclear"${NORMAL}, as there is no going back after files are deleted.
Usually....

EOF
        press_enter &&
        CONFIRM_DEL &&
        echo "Finished Deleting...."
        echo ""
    fi
}

trap 'rm $tmp_file; HELP_VERSION; exit 1' SIGHUP SIGINT SIGTERM

cmd=(dialog --keep-tite --menu "Select options: "  10 30 30)

options=(
    1 "TV"
    2 "Movies"
    3 "Porn"
    )

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices; do
    case $choice in
        1 )
            for f in ${TV_EXT}/*/*/ ; do
                cd "$f" || continue;
                echo "${PWD}";
                SHOW_OUTPUT;
                kSHOW_OUTPUT;
                cd "$OLDPWD" || ! break;
            done || ! cd - >&2;;
        2 )
            for f in ${MOVIES_EXT}/*/*/ ; do
                cd "$f" || continue;
                echo "${PWD}";
                SHOW_OUTPUT;
                kSHOW_OUTPUT;
                cd "$OLDPWD" || ! break;
            done || ! cd - >&2;;
        3)
            for f in ${PORN_EXT}/*/*/ ; do
                cd "$f" || continue;
                echo "${PWD}";
                SHOW_OUTPUT;
                kSHOW_OUTPUT;
                cd "$OLDPWD" || ! break;
            done || ! cd - >&2;;
        * )
            USAGE; HELP_VERSION; exit 1;;
    esac
done

echo ""
HELP_VERSION &&
exit 0
