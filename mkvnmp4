#!/usr/local/bin/bash -e
shopt -s globstar

# Copyright Â© 2018-2019 JPCDI, JPartain89 and Justin Partain
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script is for looking through my media files for any MKV
# files and:
## - Send them to Subler using Apple's Applescript Automation Language
## - Simply List them
## - Delete them (I don't suggest using this, as its had a habit of erasing all
###  of the directory....)

# Program information
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROGRAM_NAME="mkvnmp4"
VERSION="3.0.0"

command -v "$PROGRAM_NAME" 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
            sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
            sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
        else
            echo "For some reason, linking $PROGRAM_NAME to /usr/local/bin,"
            echo "failed. My apologies for not being able to figure it out..."
            exit 1
        fi
    )
}

if [ -f /etc/mkvnmp4.conf ]; then
    . /etc/mkvnmp4.conf
elif [ -f ~/.mkvnmp4.conf ]; then
    . ~/.mkvnmp4.conf
elif [ -f ~/.config/mkvnmp4.conf ]; then
    . ~/.config/mkvnmp4.conf
else
    cat << EOF
We couldn't find the mkvnmp4.conf configuration file that we require to run!
The file is looked for at:

    /etc/mkvnmp4.conf
            - or -
    ~/.mkvnmp4.conf
            - or -
    ~/.config/mkvnmp4.conf

This repo has a configuration file example that you can key off of for what you need to fill out.

Exiting now.
EOF
    exit 1
fi

if [[ "$(uname)" == "Darwin" ]]; then
    if [ -d "${PornDrive}" ] || [ -d "${MovieDrive}" ]  || [ -d "${TVDrive}" ] || [ -d "${OtherDrive}" ]; then
        true
    else
        echo "Your configured drives are not present."
        echo "You need to get the drives mounted before we can continue."
        exit 1
    fi
else
    echo "Currently, only meant for macOS."
    exit 1
fi

tmp_file="$(mktemp)"
TV_EXT="${TVDrive:-OtherDrive}/**"
MOVIES_EXT="${MovieDrive:-OtherDrive}/**"
PORN_EXT="${PornDrive:-OtherDrive}/**"

RED=$(tput setaf 1)
NORMAL=$(tput sgr 0)

press_enter() {
    echo ""
    echo -n "Press Enter to Continue..."
    read -r
}

USAGE() {
cat << EOF
${PROGRAM_NAME}

    This program is to remove the duplicated .mkv files when the corresponding .mp4 file is present.

${RED}Currently, this does not make sure the new, .mp4 version is not currently being worked on - duplicated from the .mkv - or even correctly sourced from the .mkv.

            MAKE SURE TO DOUBLE CHECK FIRST!${NORMAL}
EOF
}

# This is the entire find command line, with `mkv` and `m4v` included
findCMD() {
    find -s "${PWD}" -type f \( -iname "*.mkv" -o -iname "*.m4v" \)  -exec echo {} \;
}

outputMKVFiles() {
    if (find -s . -type f \( -iname "*.mkv" -o -iname "*.m4v" \) | grep -E ".*" >/dev/null) ; then
        echo ""
        while IFS= read -r file; do
            echo "${file#./}"
        done < <(findCMD)
        echo ""
    fi
}

outputToSubler() {
    while IFS= read -r file; do
        if [[ ! -e ${file%.mkv}.mp4 ]]; then
            echo ""
            echo "$file ${RED}<--THIS ONE${NORMAL}"
            osascript -e "
                set filePath to (POSIX file \"$file\" as alias)
                tell application \"Subler\"
                    add to queue filePath
                end tell"
        elif [[ ! -e ${file%.m4v}.mp4 ]]; then
            echo ""
            echo "$file ${RED}<--THIS ONE${NORMAL}"
            osascript -e "
                set filePath to (POSIX file \"$file\" as alias)
                tell application \"Subler\"
                    add to queue filePath
                end tell"
        fi
    done < <(findCMD)
}

CONFIRM_DEL() {
    while IFS= read -r file; do
        [[ -e ${file%.mkv}.mp4 ]] || [[ -e ${file%.m4v}.mp4 ]] &&
        echo "${RED}Erasing ${file}....${NORMAL}"
        echo ""
        rm -f "$file" ;
    done < <(findCMD)
}

SHOW_OUTPUT() {
    while IFS= read -r file; do
        [[ -e ${file%.mkv}.mp4 ]] || [[ -e ${file%.m4v}.mp4 ]]&&
        echo "
      ############################################################
${RED}$file ${NORMAL}
${file%.mkv}.mp4
      ############################################################"
    done < <(findCMD)
}

kSHOW_OUTPUT() {
    if [[ $(SHOW_OUTPUT) != "" ]]; then
cat << EOF

Please, examine the above files to confirm they are ready to be removed.

The next step is ${RED}"nuclear"${NORMAL}, as there is no going back after files are deleted.
Usually....

EOF
        press_enter &&
        CONFIRM_DEL &&
        echo "Finished Deleting...."
        echo ""
    fi
}

trap 'rm $tmp_file; exit 1' SIGHUP SIGINT SIGTERM

if [[ $? == "-h" ]]; then
    USAGE
    exit 0
fi

# This section is for the `dialog` prompts.
# It uses the main `cmd` variable, as both prompts are simple and
# the same size.
cmd=(dialog --keep-tite --menu "Select options: "  10 30 30)
# Then, the different menu options have different variable arrays
mediaOptions=(
    1 "All"
    2 "TV"
    3 "Movies"
    4 "Porn"
    5 "Custom"
)
actionOptions=(
    1 "Subler"
    2 "Delete_Duplicates"
    3 "Show all MKV Files"
)
# Then, calling the actual dialog and assigning a number to the variable
# happens here.
# And it assigns the NUMBER of the selection to the variable.
choicesAction=$("${cmd[@]}" "${actionOptions[@]}" 2>&1 >/dev/tty)
choicesMedia=$("${cmd[@]}" "${mediaOptions[@]}" 2>&1 >/dev/tty)

# These blocks were me playing with Apple's Automation stuff.
appleScriptFunction() {
    # This first item, the variable, is like the dialog selector from above,
    # but it outputs the selections NAME into the variable.
    choices=$(osascript -l JavaScript -e '
        var app = Application.currentApplication()
        app.includeStandardAdditions = true

        var locationChoices = ["TV", "Movies", "Porn", "Custom"]
        var locationList = app.chooseFromList(locationChoices, {
            withPrompt: "Select options:",
            defaultItems: ["TV"]
        })
        locationList' 2>&1)

    # This is a custom directory selector, for narrowing
    # the operation of the script.
    osascriptCustomSelector() {
        directories="$(osascript -l JavaScript -e '
            var app = Application.currentApplication()
            app.includeStandardAdditions = true

            var outputFolder = app.chooseFolder({
                withPrompt: "Please select a specific Directory to search through:",
                multipleSelectionsAllowed: true
            })
            outputFolder' | cut -d '"' -f2)"
    }
}

# The `choicesMedia` variable is for the 2nd question posed to the user.
# This block is given first so that bash has it saved to operating memory
# when asked to use it.
finalDelete() {
    for choice in $choicesMedia; do
        case $choice in
            2 | TV )
                for f in $TV_EXT ; do
                    #cd "$f" || continue;
                    echo "${PWD}";
                    SHOW_OUTPUT;
                    kSHOW_OUTPUT;
                    #cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            3 | Movies )
                for f in $MOVIES_EXT ; do
                    #cd "$f" || continue;
                    echo "${PWD}";
                    SHOW_OUTPUT;
                    kSHOW_OUTPUT;
                    #cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            4 | Porn )
                for f in $PORN_EXT ; do
                    #cd "$f" || continue;
                    echo "${PWD}";
                    SHOW_OUTPUT;
                    kSHOW_OUTPUT;
                    #cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            5 | Custom )
                osascriptCustomSelector;
                myFiles=("$directories"/*)
                for f in "${myFiles[@]}" ; do
                    #cd "$f" || continue;
                    echo "${PWD}";
                    SHOW_OUTPUT;
                    kSHOW_OUTPUT;
                    #cd "$OLDPWD" || ! break;
                done || ! cd - >&2;
                unset f myFiles directories;;
            * )
                USAGE; HELP_VERSION; exit 1;;
        esac
    done
}

sendToSubler() {
    for choice2 in $choicesMedia; do
        case $choice2 in
            1 | All )
                for f in $TV_EXT $MOVIES_EXT $PORN_EXT; do
                    cd "$f" || continue;
                    echo "${PWD}";
                    outputToSubler;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            2 | TV )
                for f in $TV_EXT ; do
                    cd "$f" || continue;
                    echo "${PWD}";
                    outputToSubler;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            3 | Movies )
                for f in $MOVIES_EXT ; do
                    cd "$f" || continue;
                    echo "${PWD}";
                    outputToSubler;
                    #cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            4 | Porn )
                for f in $PORN_EXT ; do
                    cd "$f" || continue;
                    echo "${PWD}";
                    outputToSubler;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            5 | Custom )
                osascriptCustomSelector;
                myFiles=("$directories"/*)
                for f in "${myFiles[@]}" ; do
                    cd "$f" || continue;
                    echo "${PWD}";
                    outputToSubler;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;
                unset f myFiles directories;;
            * )
                USAGE; HELP_VERSION; exit 1;;
        esac
    done
}

showMKVFiles() {
    for choice3 in $choicesMedia; do
        case $choice3 in
            1 | TV )
                for f in $TV_EXT ; do
                    cd "$f" || continue;
                    SHOW_OUTPUT;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            2 | Movies )
                for f in $MOVIES_EXT ; do
                    cd "$f" || continue;
                    SHOW_OUTPUT;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            3 | Porn )
                for f in $PORN_EXT ; do
                    cd "$f" || continue;
                    SHOW_OUTPUT;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;;
            4 | Custom )
                osascriptCustomSelector;
                myFiles=("$directories"/*)
                for f in "${myFiles[@]}" ; do
                    cd "$f" || continue;
                    SHOW_OUTPUT;
                    cd "$OLDPWD" || ! break;
                done || ! cd - >&2;
                unset f myFiles directories;;
            * )
                USAGE; HELP_VERSION; exit 1;;
        esac
    done
}

for choice in $choicesAction; do
    case $choice in
        1 )
            sendToSubler;;
        2 )
            finalDelete;;
        3 )
            showMKVFiles;;
    esac
done

echo ""
exit 0
