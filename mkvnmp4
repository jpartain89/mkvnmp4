#!/usr/bin/env bash
# shellcheck disable=SC1091
set -e

# Copyright Â© 2018-2019 JPCDI, JPartain89 and Justin Partain
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script is for looking through my media files for any MKV
# files and:
## - Send them to Subler using Apple's Applescript Automation Language
## - Simply List them
## - Delete them (I don't suggest using this, as its had a habit of erasing all
###  of the directory....)

# Program information
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROGRAM_NAME="mkvnmp4"
VERSION="4.5.1"

function die() {
    echo "${PROGRAM_NAME}: $1" >&2
    exit "${2:-1}"
}

command -v "${PROGRAM_NAME}" 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
            sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
            sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
        else
            die "For some reason, linking ${PROGRAM_NAME} to /usr/local/bin,
            failed. My apologies for not being able to figure it out..."
        fi
    )
}

# This block is to "source" the configuration file.
if [ -f /etc/mkvnmp4.conf ]; then
    source /etc/mkvnmp4.conf
elif [ -f  /etc/mkvnmp4/mkvnmp4.conf ]; then
    source /etc/mkvnmp4/mkvnmp4.conf
elif [ -f ~/.mkvnmp4.conf ]; then
    source "${HOME}/.mkvnmp4.conf"
elif [ -f ~/.config/mkvnmp4.conf ]; then
    source "${HOME}/.config/mkvnmp4.conf"
else
    die << EOF
We couldn't find the ${PROGRAM_NAME}.conf configuration file that we require to run!
The file is looked for at:

    /etc/${PROGRAM_NAME}.conf
            - or -
    /etc/${PROGRAM_NAME}/${PROGRAM_NAME}.conf
            - or -
    ~/.${PROGRAM_NAME}.conf
            - or -
    ~/.config/${PROGRAM_NAME}.conf

This repo has a configuration file example that you can key off of for what you need to fill out.

Exiting now.
EOF
    exit 1
fi

# This tests for gnu-getopt, as thats needed to run
if [ -f /usr/local/opt/gnu-getopt/bin/getopt ]; then
    GETOPT="/usr/local/opt/gnu-getopt/bin/getopt"
    if [ "$("$GETOPT" --test; echo $?)" != 4 ]; then
        die "You seem to have the wrong version of gnu-getopt?
        Please investigate and have the proper one installed."
    fi
else
    die "Seems you're missing the required gnu-getopt program.
    Please install using brew install gnu-getopt."
fi

# This block is meant to stop usage on Linux Machines, as I've only tested
# this script on macOS
if [[ "$(uname)" == "Darwin" ]]; then
    COUNTER=0
    for f in "${DRIVES[@]}"; do
        if [ -d "$f" ]; then
            COUNTER=$((COUNTER +1 ))
        fi
        if [ "${COUNTER}" == 0 ]; then
            die "Your configured drives are not present.
            You need to get the drives mounted before we can continue."
        fi
    done
    unset f
    unset COUNTER
else
    die "Currently, only meant for macOS."
fi

TIMEOUT_WAIT="${WAIT_TIMEOUT:-600}"

RED=$(tput setaf 1)
NORMAL=$(tput sgr 0)

function press_enter() {
    echo ""
    echo -n "Press Enter to Continue..."
    read -r
}

function usage() {
cat << EOF
${PROGRAM_NAME} [ -s | --send ] or  [ -w | -- wait ]
             |--[ --rm ]
             |--[ --dup ]
             |--[ -v ]
             |--[ -h | --help ]

      -s | --send : Send to Subler
            -- or --
      -w | --wait : Tells Subler to wait between jobs in order to auto
                  : delete the duplicates.
                  : Much safer than -rm below.

        --rm       : Remove duplicate MKV's that also have mp4
        --dup      : Show Duplicates
      -h | --help : This Help
        -v        : Increase the verbosity

    This program is to send mkv files to Subler using Apple's AppleScript automation backend.

    When using -w or --wait, we will sit and wait until the current item is finished
      processing in Subler. At that point, the original mkv file gets moved to the trash.

    The amount of time before timeout is reached can be adjusted using the variable WAIT_TIMEOUT.
      The amount of time is in seconds, so WAIT_TIMEOUT=600 would be a timeout of 5 minutes.
      If you find that Subler tends to take longer for you, you're welcome to change that.

    -s | --send is the default option, if you don't have any CLI flags.
EOF
}

# The find commands, at this point, need to stay separate due to
# the fact that the testing lines were still operating even if
# the mp4's already existed

# Having separated them out, the process now takes - literally - twice
# as long to process. But, for now, thats just fine.

# This is the entire find command line for`mkv`
function findCMDmkv() {
    find -s "${f}" -maxdepth 4 -type f -iname "*.mkv"  -exec echo {} \;
}
# This is the entire find command line for `m4v`
function findCMDm4v() {
    find -s "${f}" -maxdepth 4 -type f -iname "*.m4v"  -exec echo {} \;
}

function outputMKVFiles() {
    while IFS= read -r file; do
        y="${file%.mkv}.mp4"
        if [[ -e ${y} ]]; then
            echo ""
            echo "${file}"
        fi
    done < <(findCMDmkv)
    while IFS= read -r file; do
        y="${file%.m4v}.mp4"
        if [[ -e ${y} ]]; then
            echo ""
            echo "${file}"
        fi
    done < <(findCMDm4v)
}

function outputToSubler_NoWait() {
    # This bit of scripting runs through AppleScript to Subler
    # without the waiting and Moving to Trash step
    for f in "${DRIVES[@]}"; do echo "${f}";
    while IFS= read -r file; do
        y="${file%.mkv}.mp4"
        if [[ ! -e ${y} ]]; then
            echo ""
            echo "${file} ${RED}<--THIS ONE${NORMAL}"
            osascript -e "
                set filePath to (POSIX file \"${file}\" as alias)
                tell application \"Subler\"
                    add to queue filePath
                    start queue
                end tell"
        fi
    done < <(findCMDmkv)
    unset y
    while IFS= read -r file; do
        y="${file%.m4v}.mp4"
        if [[ ! -e ${y} ]]; then
            echo ""
            echo "${file} ${RED}<--THIS ONE${NORMAL}"
            osascript -e "
            set filePath to (POSIX file \"${file}\" as alias)
            tell application \"Subler\"
                add to queue filePath
                start queue
            end tell"
        fi
    done < <(findCMDm4v)
    unset y
    done
}

function outputToSubler_Wait() {
    # This bit of scripting runs through AppleScript to Subler
    for f in "${DRIVES[@]}"; do echo "${f}";
    while IFS= read -r file; do
        y="${file%.mkv}.mp4"
        if [[ ! -e ${y} ]]; then
            echo ""
            echo "${file} ${RED}<--THIS ONE${NORMAL}"
            osascript -e "
                set filePath to (POSIX file \"${file}\" as alias)
                set TimeOutWait to \"${TIMEOUT_WAIT}\"
                tell application \"Subler\"
                    with timeout of TimeOutWait seconds
                    add to queue filePath
                    start queue and wait
                    tell application \"Finder\"
                        if exists file filePath then
                            delete file filePath
                        end if
                    end tell
                    end timeout
                end tell"
        fi
    done < <(findCMDmkv)
    unset y
    while IFS= read -r file; do
        y="${file%.m4v}.mp4"
        if [[ ! -e ${y} ]]; then
            echo ""
            echo "${file} ${RED}<--THIS ONE${NORMAL}"
            osascript -e "
            set filePath to (POSIX file \"${file}\" as alias)
            set TimeOutWait to \"${TIMEOUT_WAIT}\"
            tell application \"Subler\"
                with timeout of TimeOutWait seconds
                add to queue filePath
                start queue and wait
                tell application \"Finder\"
                    if exists file filePath then
                        delete file filePath
                    end if
                end timeout
                end tell
            end tell"
        fi
    done < <(findCMDm4v)
    unset y
    done
}

function confirmDel() {
    while IFS= read -r file; do
        y="${file%.mkv}.mp4"
        if [[ -e ${y} ]]; then
            echo "${RED}Erasing ${file}....${NORMAL}"
            echo ""
            rm -f "${file}" ;
        fi
    done < <(findCMDmkv)
    unset y

    while IFS= read -r file; do
        y="${file%.m4v}.mp4"
        if [[ -e ${y} ]]; then
            echo "${RED}Erasing ${file}....${NORMAL}"
            echo ""
            rm -f "${file}" ;
        fi
    done < <(findCMDm4v)
    unset y
}

function ShowOutPut() {
    while IFS= read -r file; do
        y="${file%.mkv}.mp4"
        if [[ ! -e ${y} ]]; then

            cat <<EOF
###########################################################
${RED}${file} ${NORMAL}
${file%.mkv}.mp4
###########################################################
EOF

        fi
    done < <(findCMDmkv)
    unset y

    while IFS= read -r file; do
        y="${file%.m4v}.mp4"
        if [[ ! -e ${y} ]]; then

            cat <<EOF
###########################################################
${RED}${file} ${NORMAL}
${file%.m4v}.mp4
###########################################################
EOF

        fi
    done < <(findCMDm4v)
    unset y
}

# This is the block that goes through and finalizes the removal
# of the duplicated files, removing the mkv or m4v files.
function kShowOutPut() {
    if [[ ShowOutPut != "" ]]; then
cat << EOF

Please, examine the above files to confirm they are ready to be removed.

The next step is ${RED}"nuclear"${NORMAL}, as there is no going back after files are deleted.
Usually....

EOF
        press_enter &&
        confirmDel &&
        echo "Finished Deleting...."
        echo ""
    fi
}

trap 'die 1' SIGHUP SIGINT SIGTERM

function finalDelete() {
    for f in "${DRIVES[@]}"; do
        echo "${f}";
        ShowOutPut;
        kShowOutPut;
    done
}

function showMKVFiles() {
    for f in "${DRIVES[@]}"; do
        outputMKVFiles;
    done
}

# These are declaring our command line flags for getopt lower down
SHORT=swh
LONG=send,wait,rm,dup,help

OPTS=$(${GETOPT} --options ${SHORT} --long ${LONG} --name "$0" -- "$@")

if [ $# == 0 ]; then
  outputToSubler_NoWait && exit 0
fi

if [ $? != 0 ] ; then
    die "Failed to parse options...exiting." >&2
fi

eval set -- "${OPTS}"

while true; do
    case "$1" in
        -s | --send )
            outputToSubler_NoWait
            exit 0
            ;;
        -w | --wait )
            outputToSubler_Wait
            exit 0
            ;;
        --rm )
            finalDelete
            exit 0
            ;;
        --dup )
            showMKVFiles
            exit 0
            ;;
        -h | --help )
            usage
            exit 0
            ;;
        -- )
            shift
            break
            ;;
        * )
            outputToSubler_NoWait
            ;;
    esac
done

exit 0
